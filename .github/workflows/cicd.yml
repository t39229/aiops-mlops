name: MLOps Pipeline
on:
  push:
    branches:
      - main

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Create requirements.txt
        run: |
          cat > requirements.txt << EOF
          numpy==1.21.0
          pandas==1.3.0
          scikit-learn==1.0.2
          flask==2.2.2
          joblib==1.1.0
          mlflow==1.24.0
          werkzeug==2.2.2
          protobuf==3.20.1
          prometheus-client==0.14.1
          EOF

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Train Model
        run: python train_model.py # Use the training-only script

      # - name: Save Model Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: model-artifacts
      #     path: |
      #       model.pkl
      #       scaler.pkl
      #       selector.pkl

      # Save both model artifacts AND requirements.txt for the deploy job
      - name: Save Model Artifacts and Requirements
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: |
            model.pkl
            scaler.pkl
            selector.pkl
            requirements.txt

  deploy:
    needs: train
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download artifacts from the train job (includes requirements.txt)
      - name: Download Model Artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: .

      # Verify files are present
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          ls -la
          echo "Checking if requirements.txt exists:"
          test -f requirements.txt && echo "requirements.txt found" || echo "requirements.txt NOT found"

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << EOF
          FROM python:3.8-slim

          WORKDIR /app

          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt

          COPY . .

          EXPOSE 5000

          CMD ["python", "app.py"]  # Use the API-only script
          EOF

      - name: Build Docker Image
        run: docker build -t ml-model .

      - name: Push to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag ml-model ${{ secrets.DOCKER_USERNAME }}/ml-model:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ml-model:latest
